/***************************************************************************
* basic_writer.cpp    (writer plugin)                                      *
*                                                                          *
* A "writer" is responsible for saving the results generated by the        *
* rasterizer.  Depending on the format in which the writer saves the       *
* data, it may or may not involve the conversion of "colors" into some     *
* other format, such as RGB bytes.  If so, then some form of "tone mapping"*
* is necessary.  Alternatively, the writer might save the raw data         *
* produced by the rasterizer, which is exactly what "basic_writer" does.   *
*                                                                          *
* History:                                                                 *
*   04/06/2010  Default writer now saves images in FPM format.             *
*   04/12/2008  Initial coding.                                            *
*                                                                          *
***************************************************************************/
#include <string>
#include <fstream>
#include <sstream>
#include "toytracer.h"
#include "params.h"

using std::string;

#define NUM_SAMPLES  3
#define WAVELENGTHS  "660 530 430"  // R, G, and B wavelengths.

namespace __basic_writer__ {

struct basic_writer : Writer {  
    basic_writer() {}
    virtual ~basic_writer() {}
    virtual Plugin *ReadString( const string &params );
    virtual string MyName() const { return "basic_writer"; }
    virtual string Write( string file_name, const Raster * );
    virtual bool Default() const { return true; }
    };

REGISTER_PLUGIN( basic_writer );

Plugin *basic_writer::ReadString( const string &params ) 
    {
    ParamReader get( params );
    if( get["writer"] && get[MyName()] ) return new basic_writer();
    return NULL;
    }

// Write the raw floating point numbers to a file after a simple header
// encoding the file type, the resolution, number of channels, and the
// wavelength represented by each channel.  The file "type" and the
// extension added to the file name are both "FPM", for "Floating-point
// Pixel Map", which is basically a floating-point version of PPM files.
// This is NOT a standard format!
string basic_writer::Write( string file_name, const Raster *raster )
    {
    const unsigned width ( raster->width );
    const unsigned height( raster->height );
    const string full_name( file_name + ".fpm" );

    // Don't attempt to write anything if the raster is empty.
    if( width == 0 || height == 0 ) return "";

    // Open the file for writing in binary.  Return an empty
    // string on failure.
    std::ofstream fout( full_name.c_str(), std::ofstream::binary );
    if( !fout.is_open() ) return "";

    // Write the header information, which consists of five fields,
    // each terminated by a newline character.
    fout << "FPM"       << "\n" 
         << width       << "\n"
         << height      << "\n"
         << NUM_SAMPLES << "\n"
         << WAVELENGTHS << "\n";

    // Write the actual data, which consists of triples of
    // floating point values.
    fout.write( (const char *)raster->pixels, sizeof( Color ) * height * width );
    fout.close();

    // Return the full file name to indicate success.
    return full_name;
    }

} // namespace __basic_writer__